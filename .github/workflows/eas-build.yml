name: Android App APK Build

on:
  push:
    branches:
      - develop
  workflow_dispatch: # Allows manual launch

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 60 # Avoid laggy builds

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🛠️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: ☕ Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: 🧱 Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: 📦 Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: ✔ Accept Android SDK Licenses
        run: yes | sdkmanager --licenses || true # Continue even if error

      - name: ⚙️ Setup Expo & EAS
        uses: expo/expo-github-action@v8
        with:
          expo-version: latest
          eas-version: latest
          token: ${{ secrets.EAS_ACCESS_TOKEN }}

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔧 Setup Firebase config
        run: |
          # Vérifier que le secret existe
          if [ -z "${{ secrets.GOOGLE_SERVICES_JSON }}" ]; then
            echo "❌ GOOGLE_SERVICES_JSON secret is not set!"
            exit 1
          fi
          
          # Créer les dossiers nécessaires
          mkdir -p android/app/src/release
          mkdir -p android/app/src
          
          # Créer le fichier dans tous les emplacements possibles
          echo '${{ secrets.GOOGLE_SERVICES_JSON }}' > android/app/google-services.json
          echo '${{ secrets.GOOGLE_SERVICES_JSON }}' > android/app/src/google-services.json
          echo '${{ secrets.GOOGLE_SERVICES_JSON }}' > android/app/src/release/google-services.json
          
          # Vérifier que les fichiers existent et ne sont pas vides
          echo "✅ Checking google-services.json files:"
          ls -la android/app/google-services.json
          ls -la android/app/src/google-services.json
          ls -la android/app/src/release/google-services.json
          
          # Vérifier le contenu (premières lignes seulement)
          echo "📄 First lines of google-services.json:"
          head -3 android/app/google-services.json

      - name: 🔍 Verify EAS configuration
        run: |
          echo "Checking EAS configuration..."
          npx eas build:configure --platform android --non-interactive || echo "Config already exists"

      - name: 🚀 Build Android app (local)
        run: |
          echo "Starting EAS build..."
          npx eas build --platform android --profile preview --local --output ./app-release.apk
        env:
          EAS_NO_VCS: 1 # Avoids some Git issues

      - name: 📤 Upload APK artifact
        uses: actions/upload-artifact@v4
        if: success() # Upload only if build succeeds
        with:
          name: app-release-${{ github.run_number }}
          path: ./app-release.apk
          retention-days: 30

      - name: 📋 Build summary
        if: always()
        run: |
          echo "Build completed!"
          echo "APK size: $(du -h ./app-release.apk 2>/dev/null || echo 'N/A')"
          echo "Build number: ${{ github.run_number }}"