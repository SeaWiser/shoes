import { authService } from "./authService"; // Ajout pour l'authentification

const API_BASE_URL = process.env.EXPO_PUBLIC_API_URL;

export interface Notification {
  id: string;
  notifsIds: string[];
}

export interface AddNotificationResponse {
  name: string;
}

export interface UpdateNotificationRequest {
  id: string;
  notifsIds: string[];
}

export const notificationsService = {
  /**
   * Version locale uniquement - Pas d'appels API
   */
  async getAllSeenNotifications(): Promise<Notification> {
    console.log("üîî [LOCAL] R√©cup√©ration des notifications vues...");

    // ‚úÖ Retourner directement des donn√©es par d√©faut
    return {
      id: "local",
      notifsIds: [], // Le store Zustand g√®re les vraies donn√©es
    };
  },

  async addSeenNotification(
    notificationId: string,
  ): Promise<AddNotificationResponse> {
    console.log("‚ûï [LOCAL] Notification marqu√©e comme vue:", notificationId);

    // ‚úÖ Simulation de succ√®s
    return { name: `local-${Date.now()}` };
  },

  async updateSeenNotifications({
    id,
    notifsIds,
  }: UpdateNotificationRequest): Promise<void> {
    console.log("üîÑ [LOCAL] Mise √† jour notifications:", {
      id,
      count: notifsIds.length,
    });
    // ‚úÖ Pas d'action r√©elle, le store Zustand g√®re tout
  },

  async clearAllSeenNotifications(id: string): Promise<void> {
    console.log("üóëÔ∏è [LOCAL] Suppression de toutes les notifications");
    // ‚úÖ Pas d'action r√©elle
  },

  async markAsSeenOptimistic(
    currentNotifications: Notification,
    newNotificationId: string,
  ): Promise<Notification> {
    console.log("üìù [LOCAL] Marquage optimiste:", newNotificationId);

    // ‚úÖ Retourner directement les donn√©es mises √† jour
    return {
      ...currentNotifications,
      notifsIds: currentNotifications.notifsIds.includes(newNotificationId)
        ? currentNotifications.notifsIds
        : [...currentNotifications.notifsIds, newNotificationId],
    };
  },
};
